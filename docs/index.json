[
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/tips/",
	"title": "PowerShell Tips and Quirks",
	"tags": [],
	"description": "",
	"content": " reserved variable names Do not use these as variable names - PowerShell will not complain if you do, you\u0026rsquo;ll just see weird results (variable names are case insensitive)\n$input $home  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/asyncawait/",
	"title": "async and await",
	"tags": [],
	"description": "",
	"content": " tldr async and await are keywords in C# to let code continue executing while waiting on a long operation (like downloading a file) to complete.\nTypically, I write synchronous code because it is easier to debug, after it works, then I\u0026rsquo;ll use async/await.\nTo make async methods synchronous (i.e. block further code execution until method finishes), add .Result to the end of the method call. E.g. client.DownloadFileAsync().Result\nQuick code snippet This is how you create a batch of web requests to run in parallel. (You await on Task.WhenAll() instead of awaiting after each call to DownloadWebsiteAsync())\npublic async Task RunDownloadParallelAsync() { List\u0026lt;string\u0026gt; websites = GetWebsiteList(); var tasks = new List\u0026lt;Task\u0026lt;DownloadWebsiteResult\u0026gt;\u0026gt;(); foreach (string site in websites) { tasks.Add(DownloadWebsiteAsync(site)); } List\u0026lt;DownloadWebsiteResult\u0026gt; results = await Task.WhenAll(tasks); foreach (DownloadWebsiteResult dwr in results) { ReportWebsiteInfo(dwr); } }   Code snippet is part of the example used in the following video.  Video This video does a great job at explaining async and await. Tim goes through the example of downloading a sequence of files. (Watch it in double speed):\n  Here\u0026rsquo;s how to cancel tasks and get progress on the task\n  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/dynamictypes/",
	"title": "Ignoring Types",
	"tags": [],
	"description": "",
	"content": " Strongly typed vs dynamically typed Strongly typed means that the compiler will complain if a method does not exist in the class specified during variable declaration. C# is strongly typed, but if you are used to dynamically typed languages (like Python), you can do that too.\n//strongly typed Animal duck = Factory.MakeDuck(); duck.quack(); //compile error because quack() is not defined in Animal even though you know the underlying object is a duck  Dynamically typed means that the compiler will not care whether the method exists or not (it will be done at runtime)\n//dynamically typed dynamic duck = Factory.MakeDuck(); duck.quack(); //a method called \u0026quot;quack()\u0026quot; will be checked at runtime. Also, the autocomplete will not work for dynamic variables.  There may be cases where you will need to ignore the object type in order to make classes decoupled. It\u0026rsquo;s highly recommended that you have unit tests that will catch type errors.\nI typically use dynamic when parsing JSON data with arbitrary/unknown fields.\nTip: Type checking and casting in one line Here\u0026rsquo;s how you check whether an object is of a certain type\nif(someObject is Duck d) //shorthand for typecasting someObject to \u0026quot;Duck\u0026quot; within the if block { d.quack(); }  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/reflection/",
	"title": "Reflection",
	"tags": [],
	"description": "",
	"content": " If you have scripting language that allows you to call C# (e.g. Powershell), or if you want to call dll\u0026rsquo;s without having to reference them, then you need to learn how to use Reflection.\nWhat is \u0026ldquo;reflection\u0026rdquo;? It\u0026rsquo;s a way of programatically examining and calling code from an assembly (.dll/.exe) at runtime.\nThe examples here are in C#, but the concepts apply when you are using scripting languages that use .NET.\nLoad C# Objects How would you use classes from a different dll without importing it? You could use Assembly.UnsafeLoadFrom(\u0026quot;path to dll\u0026quot;); this will return an Assembly object, which you can use to create instances programatically.\nvar targetAssmbly = Assembly.UnsafeLoadFrom(@\u0026quot;\\\\pathTo\\your.dll\u0026quot;); var instance = targetAssmbly.CreateInstance(\u0026quot;Some.Class.In.Assembly\u0026quot;);  Create C# Objects (w/Reflection) Let\u0026rsquo;s start with two fundamental methods CreateInstance and GetType. These are instance methods in System.Reflection.Assembly.\nCreateInstance is equivalent to programatically making a new object.\n//this is the Reflection equivalent of doing var x = new System.Collections.ArrayList(); var x = \u0026quot;\u0026quot;.GetType().Assembly.CreateInstance(\u0026quot;System.Collections.ArrayList\u0026quot;);  GetType is equivalent to getting a handle to a class so that you can call a static method on it.\n//if you just want to call a static method //(such as System.Convert.FromBase64String) var convertType = \u0026quot;\u0026quot;.GetType().Assembly.GetType(\u0026quot;System.Convert\u0026quot;)  Notes Note that there is also a Type.GetType(string) static method that searches the current assembly for that Type. This can also be used.\nNote that you are only allowed to access classes from the same assembly as \u0026lsquo;String\u0026rsquo; (mscorlib.dll)\nInvoking methods (including private methods) To invoke methods with parameters, you need to pass in the parameter list as an array of C# objects.\nBut in most scripting languages, there is no notion of a \u0026ldquo;type\u0026rdquo;. So how do you create a C# array of C# objects?\nAnswer: Use the ArrayList.Add(object) function to add objects of any type, then use the ArrayList.ToArray() to convert it to a C# array of objects.\nThere are two options that you can use to invoke methods. - with the method name: Type.GetMethod(\u0026quot;nameOfMethod\u0026quot;).Invoke(...) - get all the methods of the class, then select which one you want to invoke (by index): Type.GetMethods()[3].Invoke(...)\nQuestions you might have are: - how do you invoke a method on a class vs an instance?\n- how do you invoke async methods? - how do you invoke private methods?\nInvoking a static method on a class //Example of how to dynamically invoke 'System.Convert.FromBase64String()' \u0026quot;\u0026quot;.GetType().Assembly.GetType(\u0026quot;System.Convert\u0026quot;).GetMethod(\u0026quot;FromBase64String\u0026quot;).Invoke(null, new string[]{\u0026quot;base64 string\u0026quot;});  The first argument to Invoke is the object you want to target. In this case, we are not calling this method on an object, so it is null. The second argument to Invoke is the parameter list for the method FromBase64String. It must be passed as an Object[].\nInvoking an async method on an instance Here is another example of reflectively invoking a method on an instance of an object. Note the dynamic declaration of resultsToAwait.\nvar targetAssmbly = Assembly.UnsafeLoadFrom(@\u0026quot;\\\\pathTo\\your.dll\u0026quot;); var instance = targetAssmbly.CreateInstance(\u0026quot;Some.Class.In.Assembly\u0026quot;); dynamic resultsToAwait = targetAssmbly.GetType(\u0026quot;Some.Class.In.Assembly\u0026quot;).GetMethod(\u0026quot;GetStuffAsync\u0026quot;).Invoke(instance, null); //'null' because GetStuffAsync does not need parameters IEnumerable\u0026lt;dynamic\u0026gt; results = await resultsToAwait; //assuming that the results return an IEnumerable, you have to check the return type.  Invoking Methods By Index One reason for using this is if there are overloaded methods with the same number of parameters.\nFor example, Assembly.Load(AssemblyName) and Assembly.Load(byte[])\nThe first step is to list the methods - note that the methods can appear in a different order when you are running the code on a different machine.\nThis will list all the public methods of a given type.\nMethodInfo[] allMethods = \u0026quot;\u0026quot;.GetType().GetMethods();  Invoking Private Methods by index/name You need to use these objects called \u0026lsquo;BindingFlags\u0026rsquo; and use the method: GetMethods(BindingFlags.NonPublic | BindingFlags.Instance)\nvar privateMethods = \u0026quot;\u0026quot;.GetType() .GetMethods(BindingFlags.NonPublic | BindingFlags.Instance);  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/modules/",
	"title": "Creating Modules",
	"tags": [],
	"description": "",
	"content": " There are Script modules (.psm1 files) and Binary modules (aka cmdlets)\nScript Module A script module is essentially any valid PowerShell script saved in a .psm1 extension.\nfunction Show-Calendar { } Export-ModuleMember -Function Show-Calendar  The paths where you can install your module are located in the $env:PSModulePath global variable. Be sure to create a folder for your module to exist in, even if it is only a single .psm1 file\nBy default, all functions in your script are accessible to users who import your .psm1 file, but properties are not.\nBinary (C#) Module Make a class library (dll)\nYou have to import the module by dll name: Import-Module BinModuleTest\\PSbinModule.dll\nusing System.Management.Automation; // Windows PowerShell namespace. namespace ModuleCmdlets { [Cmdlet(VerbsDiagnostic.Test, \u0026quot;BinaryModuleCmdlet1\u0026quot;)] public class TestBinaryModuleCmdlet1Command : Cmdlet { protected override void BeginProcessing() { WriteObject(\u0026quot;BinaryModuleCmdlet1 exported by the ModuleCmdlets module.\u0026quot;); } } [Cmdlet(VerbsDiagnostic.Test, \u0026quot;BinaryModuleCmdlet2\u0026quot;)] public class TestBinaryModuleCmdlet2Command : Cmdlet { protected override void BeginProcessing() { WriteObject(\u0026quot;BinaryModuleCmdlet2 exported by the ModuleCmdlets module.\u0026quot;); } } [Cmdlet(VerbsDiagnostic.Test, \u0026quot;BinaryModuleCmdlet3\u0026quot;)] public class TestBinaryModuleCmdlet3Command : Cmdlet { protected override void BeginProcessing() { WriteObject(\u0026quot;BinaryModuleCmdlet3 exported by the ModuleCmdlets module.\u0026quot;); } } }  You invoke the cmdlet like this: \u0026ldquo;Test-BinaryModuleCmdlet1\u0026rdquo;\nDebugging Binary PS Modules If you\u0026rsquo;re using Visual Studio (and making a .NET Framework library), right click on the csproj and add this to the Debug command line args: -noexit -command \u0026quot;\u0026amp;{ import-module .\\[dllName].dll -verbose}\u0026quot;\nReference: https://www.powershellmagazine.com/2014/04/08/basics-of-writing-a-powershell-module-with-c-part-2-debugging/\nIf you are making a .NET Standard library, you\u0026rsquo;ll have to add a post build event: add dotnet publish --no-build to the post build event and change the command line argument to reference .\\publish\\[dllName].dll\nThe post build event copies all the dlls (in nuget packages) that you reference (like json.net) into the output folder.\nOriginal stackoverflow answer\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/pipinginput/",
	"title": "Piping input",
	"tags": [],
	"description": "",
	"content": " So how do take input (which is usually an array of objects) that is passed to your module?\nPiping Input With PowerShell Module You just add an attribute to the parameter.\nfunction show-data { param( [Parameter(ValueFromPipeline=$true)] $InputObject ) begin { $objects = @() } process { $objects += $InputObject } end { foreach($obj in $objects) { $obj #$obj is written to the pipeline on each iteration of the loop } } } Get-ChildItem | show-data  Note that process is called for each item in the array being piped in. In the code snippet, we collected all the items to be processed during end\nUsing C# module In C# code, this is what it looks like:\nusing System.Management.Automation; //get this from nuget package manager - use PowerShellStandard.Library [Cmdlet(VerbsDiagnostic.Test, \u0026quot;PipelineObjDyn\u0026quot;)] public class TestPipelineDynamic : Cmdlet { [Parameter(ValueFromPipeline = true)] public dynamic ObjectFromPipeline { get; set; } //using dynamic because we don't know what type is going to be returned; using PSObject would be better. private List\u0026lt;dynamic\u0026gt; objects; protected override void BeginProcessing() { objects = new List\u0026lt;dynamic\u0026gt;(); } protected override void ProcessRecord() { objects.Add(ObjectFromPipeline); } protected override void EndProcessing() { foreach (var obj in objects) { WriteObject(obj); //writes object to the pipeline } } }  I strongly recommend using Visual Studio to set breakpoints and see what the underlying object (ObjectFromPipeline) looks like. You\u0026rsquo;ll get a much better understanding of what\u0026rsquo;s going on.\nCmdlet development tips When developing cmdlets (binary PS modules), you will want to convert PSObject to/from Dictionary\u0026lt;string,object\u0026gt; (or ExpandoObject)\npublic static class HelperExtensions { public static PSObject AsPSObject(this ExpandoObject eo) { //makes it so that your C# objects can be filtered/manipulated with powershell syntax var newpso = new PSObject(); var expandoAsDict = ((IDictionary\u0026lt;string, object\u0026gt;)eo); foreach (var k in expandoAsDict.Keys) { newpso.Members.Add(new PSNoteProperty(k, expandoAsDict[k])); } return newpso; } public static IDictionary\u0026lt;string,object\u0026gt; AsDictionary(this PSObject pso) { //makes stuff coming in from the pipeline easier to handle var newDict = new Dictionary\u0026lt;string, object\u0026gt;(); foreach (var prop in pso.Properties) { newDict[prop.Name] = prop.Value; } return newDict; } }  Example Cmdlet Code Example cmdlet that reads a csv file and outputs results as an array of PSObjects\n[Cmdlet(VerbsDiagnostic.Test, \u0026quot;WriteObject\u0026quot;)] public class TestBinaryModuleCmdlet1Command : Cmdlet { protected override void BeginProcessing() { using (var reader = new StreamReader(@\u0026quot;D:\\temp\\test.csv\u0026quot;)) { using (var csv = new CsvReader(reader)) { var records = csv.GetRecords\u0026lt;dynamic\u0026gt;(); foreach(var rec in records) { WriteObject(((ExpandoObject)rec).AsPSObject()); } } } } }  CsvReader is part of the CsvHelper nuget package\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/",
	"title": ".NET Intermediate Topics",
	"tags": [],
	"description": "",
	"content": " A guide to .NET for people who already know the basics FAQs .NET Standard vs .NET Core vs .NET Framework? Target .NET Core for executables that can be deployed on linux, mac + Windows.\nTarget .NET Framework if you\u0026rsquo;re in a Windows-only environment or need to use Windows-specific functionality (like the UI, or Active Directory)\nWhere possible, target .NET Standard for common code libraries (can be used by both .NET Core and Framework)\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/",
	"title": "Powershell",
	"tags": [],
	"description": "",
	"content": " A guide to PowerShell for people who already know the basics FAQs PowerShell Core? Windows PowerShell? As of 2019, PowerShell Core (aka PowerShell 6) is missing a lot of features (especially for AD and Exchange management). It is a separate install and it\u0026rsquo;s named pwsh.exe. It uses .NET Core.\nWindows PowerShell is the original - found in C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe it comes with Windows and has version 1.0 to 5.1. It is using the .NET Framework.\nPowershell modules written in .NET Standard will work on both.\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/03webapps/",
	"title": "Web Apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://efficienthacks.github.io/coderbook/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Quick usage docs for .NET coders \nless explanations, more code examples. \n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://efficienthacks.github.io/coderbook/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]