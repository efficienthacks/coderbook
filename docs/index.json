[
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/tips/",
	"title": "PowerShell Tips and Quirks",
	"tags": [],
	"description": "",
	"content": " There are a ton of PowerShell tips online, here I\u0026rsquo;ve collected the ones where I will probably forget about and need to reference. Please add some more in the comments section if you have a good tip.\nFiltering with \u0026lsquo;where\u0026rsquo; Here, we are only selecting the Id.\nPS C:\\Users\\amb12\u0026gt; Get-Process | where { $_.ProcessName -eq 'cmd' } | select Id Id -- 24552 30828  Search online for \u0026ldquo;Powershell comparison operators\u0026rdquo; to see how to use the other ones like -like -match -contains -is. Official docs\n If you want to write your own cmdlets that accept piped input works, see the section called \u0026ldquo;accepting piped input\u0026rdquo;. \nLooping with % (foreach) Let\u0026rsquo;s say you don\u0026rsquo;t want the heading \u0026lsquo;Id\u0026rsquo;, you can use a foreach loop:\nPS C:\\Users\\amb12\u0026gt; Get-Process | where { $_.ProcessName -eq 'cmd' } | %{$_.Id} 24552 30828  Get Object Type Everything being returned is a \u0026ldquo;PSObject\u0026rdquo; in C# (think of it as a dictionary). If you want to see the actual type, call GetType() on the object.\nPS C:\\Users\\amb12\u0026gt; (new-object System.Net.WebClient).GetType() IsPublic IsSerial Name BaseType -------- -------- ---- -------- True False WebClient System.ComponentModel.Component  View All Properties If you want to see the full properties, add a | fl * (format list) at the end of the object.\nPS C:\\Users\\amb12\u0026gt; (new-object System.Net.WebClient).GetType() | fl * Module : System.dll Assembly : System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 TypeHandle : System.RuntimeTypeHandle DeclaringMethod : BaseType : System.ComponentModel.Component UnderlyingSystemType : System.Net.WebClient FullName : System.Net.WebClient ...  Get Cmdlet Source You use the Get-Command cmdlet, with the full name of the cmdlet you wish to get the source for (not the alias). Then get the .DLL property:\nPS C:\\Users\\ambrose\u0026gt; (Get-Command get-content).DLL C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.PowerShell.Commands.Management\\v4.0_3.0.0.0__31bf3856ad364e35\\Microsoft.PowerShell.Commands.Management.dll  This will work for cmdlets implemented in C#. You have to open the dll in ILSpy and find the implementation manually (by convention, the name is part of the method e.g. GetContentCommand)\nIf the cmdlet is implemented in PowerShell (e.g. Add-PrinterDriver), use .Scriptblock.\nPS C:\\Users\\ambrose\u0026gt; (Get-Command Add-PrinterDriver).ScriptBlock [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)] param(  By looking at the name of a command, there is no way to know whether the cmdlet is implemented in C# or in PowerShell. You can use the .CommandType property to tell.\nPS C:\\Users\\ambrose\u0026gt; (get-command get-content).CommandType Cmdlet \u0026lt;--this means implemented in C# (dll) PS C:\\Users\\ambrose\u0026gt; (get-command Add-PrinterDriver).CommandType Function \u0026lt;--this means Powershell  Reserved variable names Do not use these as variable names - PowerShell will not complain if you do, however you\u0026rsquo;ll just see weird results (variable names are case insensitive)\n$input $home  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/devops/git/",
	"title": "Git (cmd line)",
	"tags": [],
	"description": "",
	"content": " You probably know the basics of using Git, but do you know how to have a Git repo within a Git repo?\nBasic: Initiate a Git repo from a folder with existing files Say you already have a code project going in a folder and want to version control it in Git, here\u0026rsquo;s how you do it:\ngit init git remote add origin [git URL] git add . git commit -m \u0026quot;[commit message]\u0026quot; git push --set-upstream origin master  Git (with submodules) Submodules are essentially a reference to another Git repo. You may want to break up a modular component and track it in its own repo.\nBy default, when you clone a git repo, it will not download the submodules.\nClone a git repo with submodules git clone [git URL] --recursive or --recurse-submodules\nGrab/update submodules of an existing Git clone This also updates the submodules to point to their latest branch HEAD.\ngit submodule update --remote --recursive\nAdd a submodule git submodule add [URL of submodule]\nOther useful commands git status  More Reading This article includes a section that covers how to make a folder in your repo into a submodule.\nhttps://github.blog/2016-02-01-working-with-submodules/\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/pipinginput/",
	"title": "Accepting Piped input",
	"tags": [],
	"description": "",
	"content": " So how do take input (which is usually an array of objects) that is passed to your module?\nPiping Input With PowerShell Module You just add an attribute to the parameter.\nfunction show-data { param( [Parameter(ValueFromPipeline=$true)] $InputObject ) begin { $objects = @() } process { $objects += $InputObject } end { foreach($obj in $objects) { $obj #$obj is written to the pipeline on each iteration of the loop } } } Get-ChildItem | show-data  Note that process is called for each item in the array being piped in. In the code snippet, we collected all the items to be processed during end\nUsing C# module In C# code, this is what it looks like:\nusing System.Management.Automation; //get this from nuget package manager - use PowerShellStandard.Library [Cmdlet(VerbsDiagnostic.Test, \u0026quot;PipelineObjDyn\u0026quot;)] public class TestPipelineDynamic : Cmdlet { [Parameter(ValueFromPipeline = true)] public dynamic ObjectFromPipeline { get; set; } //using dynamic because we don't know what type is going to be returned; using PSObject would be better. private List\u0026lt;dynamic\u0026gt; objects; protected override void BeginProcessing() { objects = new List\u0026lt;dynamic\u0026gt;(); } protected override void ProcessRecord() { objects.Add(ObjectFromPipeline); } protected override void EndProcessing() { foreach (var obj in objects) { WriteObject(obj); //writes object to the pipeline } } }  I strongly recommend using Visual Studio to set breakpoints and see what the underlying object (ObjectFromPipeline) looks like. You\u0026rsquo;ll get a much better understanding of what\u0026rsquo;s going on.\nCmdlet development tips When developing cmdlets (binary PS modules), you will want to convert PSObject to/from Dictionary\u0026lt;string,object\u0026gt; (or ExpandoObject)\npublic static class HelperExtensions { public static PSObject AsPSObject(this ExpandoObject eo) { //makes it so that your C# objects can be filtered/manipulated with powershell syntax var newpso = new PSObject(); var expandoAsDict = ((IDictionary\u0026lt;string, object\u0026gt;)eo); foreach (var k in expandoAsDict.Keys) { newpso.Members.Add(new PSNoteProperty(k, expandoAsDict[k])); } return newpso; } public static IDictionary\u0026lt;string,object\u0026gt; AsDictionary(this PSObject pso) { //makes stuff coming in from the pipeline easier to handle var newDict = new Dictionary\u0026lt;string, object\u0026gt;(); foreach (var prop in pso.Properties) { newDict[prop.Name] = prop.Value; } return newDict; } }  Example Cmdlet Code Example cmdlet that reads a csv file and outputs results as an array of PSObjects\n[Cmdlet(VerbsDiagnostic.Test, \u0026quot;WriteObject\u0026quot;)] public class TestBinaryModuleCmdlet1Command : Cmdlet { protected override void BeginProcessing() { using (var reader = new StreamReader(@\u0026quot;D:\\temp\\test.csv\u0026quot;)) { using (var csv = new CsvReader(reader)) { var records = csv.GetRecords\u0026lt;dynamic\u0026gt;(); foreach(var rec in records) { WriteObject(((ExpandoObject)rec).AsPSObject()); } } } } }  CsvReader is part of the CsvHelper nuget package\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/asyncawait/",
	"title": "async and await",
	"tags": [],
	"description": "",
	"content": " tldr async and await are keywords in C# to let code continue executing while waiting on a long operation (like downloading a file) to complete.\nTypically, I write synchronous code because it is easier to debug, after it works, then I\u0026rsquo;ll use async/await.\nTo make async methods synchronous (i.e. block further code execution until method finishes), add .Result to the end of the method call. E.g. client.DownloadFileAsync().Result\nQuick code snippet This is how you create a batch of web requests to run in parallel. (You await on Task.WhenAll() instead of awaiting after each call to DownloadWebsiteAsync())\npublic async Task RunDownloadParallelAsync() { List\u0026lt;string\u0026gt; websites = GetWebsiteList(); var tasks = new List\u0026lt;Task\u0026lt;DownloadWebsiteResult\u0026gt;\u0026gt;(); foreach (string site in websites) { tasks.Add(DownloadWebsiteAsync(site)); } List\u0026lt;DownloadWebsiteResult\u0026gt; results = await Task.WhenAll(tasks); foreach (DownloadWebsiteResult dwr in results) { ReportWebsiteInfo(dwr); } }   Code snippet is part of the example used in the following video.  Video This video does a great job at explaining async and await. Tim goes through the example of downloading a sequence of files. (Watch it in double speed):\n  Here\u0026rsquo;s how to cancel tasks and get progress on the task\n  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/dynamictypes/",
	"title": "Ignoring Types",
	"tags": [],
	"description": "",
	"content": " Strongly typed vs dynamically typed Strongly typed means that the compiler will complain if a method does not exist in the class specified during variable declaration. C# is strongly typed, but if you are used to dynamically typed languages (like Python), you can do that too.\n//strongly typed Animal duck = Factory.MakeDuck(); duck.quack(); //compile error because quack() is not defined in Animal even though you know the underlying object is a duck  Dynamically typed means that the compiler will not care whether the method exists or not (it will be done at runtime)\n//dynamically typed dynamic duck = Factory.MakeDuck(); duck.quack(); //a method called \u0026quot;quack()\u0026quot; will be checked at runtime. Also, the autocomplete will not work for dynamic variables.  There may be cases where you will need to ignore the object type in order to make classes decoupled. It\u0026rsquo;s highly recommended that you have unit tests that will catch type errors.\nI typically use dynamic when parsing JSON data with arbitrary/unknown fields.\nTip: Type checking and casting in one line Here\u0026rsquo;s how you check whether an object is of a certain type\nif(someObject is Duck d) //shorthand for typecasting someObject to \u0026quot;Duck\u0026quot; within the if block { d.quack(); }  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/reflection/",
	"title": "Reflection",
	"tags": [],
	"description": "",
	"content": " If you have scripting language that allows you to call C# (e.g. Powershell), or if you want to call undocumented private methods, then you need to learn how to use Reflection.\nWhat is \u0026ldquo;reflection\u0026rdquo;? It\u0026rsquo;s a way of programatically examining and calling code from an assembly (.dll/.exe) at runtime.\nThe examples here are in C#, but the concepts apply when you are using scripting languages that use .NET.\nLoad C# Objects How would you use classes from a different dll without importing it? You could use Assembly.UnsafeLoadFrom(\u0026quot;path to dll\u0026quot;); this will return an Assembly object, which you can use to create instances programatically.\nvar targetAssmbly = Assembly.UnsafeLoadFrom(@\u0026quot;\\\\pathTo\\your.dll\u0026quot;); var instance = targetAssmbly.CreateInstance(\u0026quot;Some.Class.In.Assembly\u0026quot;);  Create C# Objects (w/Reflection) Let\u0026rsquo;s start with two fundamental methods CreateInstance and GetType. These are instance methods in System.Reflection.Assembly.\nCreateInstance is equivalent to programatically making a new object.\n//this is the Reflection equivalent of doing var x = new System.Collections.ArrayList(); var x = \u0026quot;\u0026quot;.GetType().Assembly.CreateInstance(\u0026quot;System.Collections.ArrayList\u0026quot;);  GetType is equivalent to getting a handle to a class so that you can call a static method on it.\n//if you just want to call a static method //(such as System.Convert.FromBase64String) var convertType = \u0026quot;\u0026quot;.GetType().Assembly.GetType(\u0026quot;System.Convert\u0026quot;)  Notes Note that there is also a Type.GetType(string) static method that searches the current assembly for that Type. This can also be used.\nNote that you are only allowed to access classes from the same assembly as \u0026lsquo;String\u0026rsquo; (mscorlib.dll)\nInvoking [private] methods To invoke any method with parameters, you need to pass in the parameter list as an array of C# objects.\nBut in most scripting languages, there is no notion of a \u0026ldquo;type\u0026rdquo;. So how do you create a C# array of C# objects?\nAnswer: Use the ArrayList.Add(object) function to add objects of any type, then use the ArrayList.ToArray() to convert it to a C# array of objects.\nThere are two options that you can use to invoke methods. - with the method name: Type.GetMethod(\u0026quot;nameOfMethod\u0026quot;).Invoke(...) - get all the methods of the class, then select which one you want to invoke (by index): Type.GetMethods()[3].Invoke(...)\nQuestions you might have are: - how do you invoke a method on a class vs an instance?\n- how do you invoke async methods? - how do you invoke private methods?\nInvoking a static method on a class //Example of how to dynamically invoke 'System.Convert.FromBase64String()' \u0026quot;\u0026quot;.GetType().Assembly.GetType(\u0026quot;System.Convert\u0026quot;).GetMethod(\u0026quot;FromBase64String\u0026quot;).Invoke(null, new string[]{\u0026quot;base64 string\u0026quot;});  The first argument to Invoke is the object you want to target. In this case, we are not calling this method on an object, so it is null. The second argument to Invoke is the parameter list for the method FromBase64String. It must be passed as an Object[].\nInvoking an async method on an instance Here is another example of reflectively invoking a method on an instance of an object. Note the dynamic declaration of resultsToAwait.\nvar targetAssmbly = Assembly.UnsafeLoadFrom(@\u0026quot;\\\\pathTo\\your.dll\u0026quot;); var instance = targetAssmbly.CreateInstance(\u0026quot;Some.Class.In.Assembly\u0026quot;); dynamic resultsToAwait = targetAssmbly.GetType(\u0026quot;Some.Class.In.Assembly\u0026quot;).GetMethod(\u0026quot;GetStuffAsync\u0026quot;).Invoke(instance, null); //'null' because GetStuffAsync does not need parameters IEnumerable\u0026lt;dynamic\u0026gt; results = await resultsToAwait; //assuming that the results return an IEnumerable, you have to check the return type.  Invoking Methods By Index One reason for using this is if there are overloaded methods with the same number of parameters.\nFor example, Assembly.Load(AssemblyName) and Assembly.Load(byte[])\nThe first step is to list the methods - note that the methods can appear in a different order when you are running the code on a different machine.\nThis will list all the public methods of a given type.\nMethodInfo[] allMethods = \u0026quot;\u0026quot;.GetType().GetMethods();  Invoking Private Methods by index/name You need to use these objects called \u0026lsquo;BindingFlags\u0026rsquo; and use the method: GetMethods(BindingFlags.NonPublic | BindingFlags.Instance)\nvar privateMethods = \u0026quot;\u0026quot;.GetType() .GetMethods(BindingFlags.NonPublic | BindingFlags.Instance);  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/devops/ci/",
	"title": "Deploy on Code Checkin (CI)",
	"tags": [],
	"description": "",
	"content": " This is known as \u0026lsquo;Continuous Integration\u0026rsquo; (CI). But how do you do this in Azure Devops?\nThis article succintly introduces the concept of Pipelines in Azure Devops.\nPipelines = CI Azure Devops calls this \u0026lsquo;Pipelines\u0026rsquo; - the two main sections are \u0026lsquo;Builds\u0026rsquo; and \u0026lsquo;Releases\u0026rsquo;. Both are \u0026lsquo;pipelines\u0026rsquo;\nA \u0026lsquo;Build pipeline\u0026rsquo; means to check out the code and have the compiler (or whatever exe) build the code. You can specify what the build task is using a PowerShell script. A build pipeline can be auto-triggered when code is checked in.\nA build pipeline generates an \u0026ldquo;artifact\u0026rdquo; (a zip file of the compiled source).\nA \u0026lsquo;Release pipeline\u0026rsquo; means to take the output of the build and actually deploy it on a server. A release pipeline can be triggered after an artifact is created (from the build pipeline).\nExample pipeline (this site) Let\u0026rsquo;s take this site as an example. It\u0026rsquo;s a bunch of .md files and images which need to be run through Hugo.exe (a static site generator).\nA build pipeline is created that checks out the repository (of .md files) and calls a Hugo task to output the statically generated html into an \u0026ldquo;artifact\u0026rdquo;.\nThe release pipeline takes the artifact and deploys it (my deploy task is a PowerShell script, you can also use Bash scripts too if that\u0026rsquo;s your thing).\nDeployment Secrets Generally, there are tokens that are contained within the deploy script in the release pipeline. This is so the \u0026ldquo;artifact\u0026rdquo; can be deployed on an unrelated server. You should always use tokens (as opposed to credentials) as tokens can be changed and updated easily.\nBe very careful of who can view your Azure Devops Pipelines!\nEven if you mask variables, there are ways to print out the variables into the log files.\nWhat does a build involve? How do you checkout submodules? By default, git does not check out submodules (a reference to another git repo), You have to add submodules: true in the checkout step.\nHere is what my build definition looks like - you can go to https://aka.ms/yaml for the specifications.\ntrigger: - master pool: vmImage: 'vs2017-win2016' steps: - checkout: self submodules: true displayName: 'Checkout repository including submodules' - task: HugoTask@1 displayName: 'Generate Hugo site' inputs: destination: '$(Build.ArtifactStagingDirectory)' - task: PublishPipelineArtifact@0 displayName: 'Publish Hugo site as artifact' inputs: artifactName: 'docs' #Note the artifact name, which you might need to reference in your scripts in the 'release' pipeline targetPath: '$(Build.ArtifactStagingDirectory)'  Ref: Official doc for predefined variables.\nNotes\nIn 2019, there is a \u0026lsquo;classic editor\u0026rsquo; version of this where you can pick the tasks from a list, not sure if this will be removed, but it is more user friendly.\nWhen you create a new build pipeline, you have to select where the source is coming from, here is what\u0026rsquo;s supported (2019):\nWhat does a release look like? When you edit a release, it looks like this: This says \u0026ldquo;Take the output artifact from the build pipeline, and run a task.\u0026rdquo;. \u0026ldquo;Continuous deployment trigger\u0026rdquo; means that this will automatically happen when an artifact is available.\nWhen you click on 1 job, 1 task, you will be able to see exactly what the release does.\nIn my case, it takes the artifact contents and pushes changes into my \u0026ldquo;github pages\u0026rdquo; repository (which is a totally different account than Azure Devops).\nThe PowerShell script is as follows - (note that I hardcode the variables here to make things simpler):\n$docPath = '$(System.DefaultWorkingDirectory)\\_coderdocs\\*' $githubusername = 'efficienthacks' $githubemail = 'email@doesnt-matter.com' $githubaccesstoken = '[generate from github]' $repositoryname = 'coderdocs' $commitMessage = 'Automated Release $(Release.ReleaseId)' $branchName = 'master' $defaultWorkingDirectory = '$(System.DefaultWorkingDirectory)' Write-Host \u0026quot;Cloning existing GitHub repository\u0026quot; # these will be seen in the logs git clone https://${githubusername}:$githubaccesstoken@github.com/$githubusername/$repositoryname.git --branch=$branchName $defaultWorkingDirectory\\coderdocs if ($lastexitcode -gt 0) { Write-Host \u0026quot;##vso[task.logissue type=error;]Unable to clone repository - check username, access token and repository name. Error code $lastexitcode\u0026quot; [Environment]::Exit(1) } $to = \u0026quot;$defaultWorkingDirectory\\coderdocs\u0026quot; Write-Host \u0026quot;Copying new documentation into branch\u0026quot; Copy-Item $docPath $to -recurse -Force #this copies my artifact which I named 'docs' (from the build pipeline) so I will have all the html files in $defaultWorkingDirectory\\coderdocs\\docs Write-Host \u0026quot;Committing the GitHub repository\u0026quot; cd $defaultWorkingDirectory\\coderdocs git config core.autocrlf false git config user.email $githubemail git config user.name $githubusername git add * git commit --allow-empty -m $commitMessage if ($lastexitcode -gt 0) { Write-Host \u0026quot;##vso[task.logissue type=error;]Error committing - see earlier log, error code $lastexitcode\u0026quot; [Environment]::Exit(1) } git push --quiet if ($lastexitcode -gt 0) { Write-Host \u0026quot;##vso[task.logissue type=error;]Error pushing to $branchName branch, probably an incorrect Personal Access Token, error code $lastexitcode\u0026quot; [Environment]::Exit(1) }  Credit: JamesRandall\nNotes\nWhen you create a release, you will choose the artifact(s), note that the artifact does not need to be generated from your Build Pipeline. As of 2019, here are the supported artifact sources:\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/modules/",
	"title": "Creating Modules",
	"tags": [],
	"description": "",
	"content": " There are Script modules (.psm1 files) and Binary modules (aka cmdlets)\nScript Module A script module is essentially any valid PowerShell script saved in a .psm1 extension.\nfunction Show-Calendar { } Export-ModuleMember -Function Show-Calendar  The paths where you can install your module are located in the $env:PSModulePath global variable. Be sure to create a folder for your module to exist in, even if it is only a single .psm1 file\nBy default, all functions in your script are accessible to users who import your .psm1 file, but properties are not.\nBinary (C#) Module Make a class library (dll)\nYou have to import the module by dll name: Import-Module BinModuleTest\\PSbinModule.dll\nusing System.Management.Automation; // Windows PowerShell namespace. namespace ModuleCmdlets { [Cmdlet(VerbsDiagnostic.Test, \u0026quot;BinaryModuleCmdlet1\u0026quot;)] public class TestBinaryModuleCmdlet1Command : Cmdlet { protected override void BeginProcessing() { WriteObject(\u0026quot;BinaryModuleCmdlet1 exported by the ModuleCmdlets module.\u0026quot;); } } [Cmdlet(VerbsDiagnostic.Test, \u0026quot;BinaryModuleCmdlet2\u0026quot;)] public class TestBinaryModuleCmdlet2Command : Cmdlet { protected override void BeginProcessing() { WriteObject(\u0026quot;BinaryModuleCmdlet2 exported by the ModuleCmdlets module.\u0026quot;); } } [Cmdlet(VerbsDiagnostic.Test, \u0026quot;BinaryModuleCmdlet3\u0026quot;)] public class TestBinaryModuleCmdlet3Command : Cmdlet { protected override void BeginProcessing() { WriteObject(\u0026quot;BinaryModuleCmdlet3 exported by the ModuleCmdlets module.\u0026quot;); } } }  You invoke the cmdlet like this: \u0026ldquo;Test-BinaryModuleCmdlet1\u0026rdquo;\nDebugging Binary PS Modules If you\u0026rsquo;re using Visual Studio (and making a .NET Framework library), right click on the csproj and add this to the Debug command line args: -noexit -command \u0026quot;\u0026amp;{ import-module .\\[dllName].dll -verbose}\u0026quot;\nReference: https://www.powershellmagazine.com/2014/04/08/basics-of-writing-a-powershell-module-with-c-part-2-debugging/\nIf you are making a .NET Standard library, you\u0026rsquo;ll have to add a post build event: add dotnet publish --no-build to the post build event and change the command line argument to reference .\\publish\\[dllName].dll\nThe post build event copies all the dlls (in nuget packages) that you reference (like json.net) into the output folder.\nOriginal stackoverflow answer\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/decompiler/",
	"title": "Debugging with no source",
	"tags": [],
	"description": "",
	"content": " No Source? No Problem. Well-known decompilers are .NET Reflector, ILSpy. These will restore the source code from .NET dll or exe files (aka assemblies). You can even save the decompiled source as a csproj.\nOne step further A newer tool called \u0026ldquo;dnSpy\u0026rdquo; https://github.com/0xd4d/dnSpy lets you debug and edit .NET assemblies! (you can attach to a running process as well as launch them)\nTip: debugging webapps running in IISExpress: You need to view the debug output from Visual Studio and find your dll in that list (because IISExpress copies the dlls to temp locations). Many times when the debugger isn\u0026rsquo;t stopping on the breakpoint, it\u0026rsquo;s because the dll you have chosen is not the right copy.\nFun fact: dnSpy uses the same engine as ILSpy to decompile\nHere it is in action:\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/dotnet/",
	"title": ".NET Intermediate Topics",
	"tags": [],
	"description": "",
	"content": " A guide to .NET for people who already know the basics FAQs .NET Standard vs .NET Core vs .NET Framework? Target .NET Core for executables that can be deployed on linux, mac + Windows.\nTarget .NET Framework if you\u0026rsquo;re in a Windows-only environment or need to use Windows-specific functionality (like the UI, or Active Directory)\nWhere possible, target .NET Standard for common code libraries (can be used by both .NET Core and Framework)\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/asjob/",
	"title": "Implementing AsJob",
	"tags": [],
	"description": "",
	"content": " -AsJob is a common switch in all the official PowerShell cmdlets that allow them to run in the background. But how do you implement it?\nYou\u0026rsquo;ll have to restructure your module a little bit. There\u0026rsquo;s probably another way in which you don\u0026rsquo;t have to, but I haven\u0026rsquo;t figured that out.\nModify the C# module code For the C# cmdlet module, do this - this is standard template code obtained from the official documentation (see resources below).\nprotected override void ProcessRecord() { if (asjob) { // Add the job definition to the job repository, // return the job object, and then create the thread // used to run the job. JobRepository.Add(job); //the job instance comes later - scroll down to the last step to see how to instantiate it WriteObject(job); ThreadPool.QueueUserWorkItem(WorkItem); } else { //this is to process the 'job' synchronously (i.e. normally) job.ProcessJob(); foreach (PSObject p in job.Output) { WriteObject(p); } } }  Implement the Job class I went and made my own JobImpl that\u0026rsquo;s different from the example in the offical docs. You have to make a new file PSJobImpl.cs:\npublic class PSJobImpl: Job { //this is what will be executed in the background Action\u0026lt;PSDataCollection\u0026lt;PSObject\u0026gt;\u0026gt; _logicWithOutput; public PSJobImpl(string command, Action\u0026lt;PSDataCollection\u0026lt;PSObject\u0026gt;\u0026gt; logicWOutput) : base(command) { SetJobState(JobState.NotStarted); _logicWithOutput = logicWOutput; } public override string StatusMessage { get { return \u0026quot;Status\u0026quot;; } } public override bool HasMoreData { get { return hasMoreData; } } private bool hasMoreData = true; public override string Location { get { return \u0026quot;Location\u0026quot;; } } public override void StopJob() { throw new NotImplementedException(); } public void ProcessJob() { SetJobState(JobState.Running); DoProcessLogic(); SetJobState(JobState.Completed); } void DoProcessLogic() { if(_logicWithOutput != null) { _logicWithOutput(Output); Output.Complete(); } } }  Back to the C# module code Here is how you instantiate the job that was used in the first step.\nPSJobImpl job = new PSJobImpl(\u0026quot;CmdletName\u0026quot;, (outputCollection) =\u0026gt; { //instead of calling WriteObject, call this: outputCollection.Add(\u0026quot;[PSObject goes here]\u0026quot;); });  References Official docs: https://docs.microsoft.com/en-us/powershell/developer/cmdlet/how-to-support-jobs\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/powershell/",
	"title": "PowerShell",
	"tags": [],
	"description": "",
	"content": " A guide to PowerShell for people who already know the basics FAQs PowerShell Core? Windows PowerShell? As of 2019, PowerShell Core (aka PowerShell 6) is missing a lot of features (especially for AD and Exchange management). It is a separate install and it\u0026rsquo;s named pwsh.exe. It uses .NET Core.\nWindows PowerShell is the original - found in C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe it comes with Windows and has version 1.0 to 5.1. It is using the .NET Framework.\nPowershell modules written in .NET Standard will work on both.\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/web/",
	"title": "Web Backend (services)",
	"tags": [],
	"description": "",
	"content": " A guide to Web Development in .NET (Make sure you take a look at the Azure Components section)\nFAQs What\u0026rsquo;s the general design of a web application? Currently, the \u0026lsquo;web application\u0026rsquo; component are just web APIs. Client front-ends (i.e. Angular, React, Progressive Web Apps, Mobile apps) will call the web app endpoints to retrieve data (typically in JSON format).\nThe web app (i.e. backend) interacts with databases and possibly other web services, while the client app (i.e. front end) displays that data in a meaningful way for the user.\nRegarding authentication, the back end provides a bearer token (usually in JWT format) that is stored in \u0026ldquo;local storage\u0026rdquo; in the browser/mobile application - traditionally, the user identifier were stored cookies.\n It\u0026rsquo;s 2019 when I\u0026rsquo;m writing this, so things might change.  ASP.NET Core and or Framework? Here\u0026rsquo;s the official documentation on that.\nhttps://docs.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server\nBasically, use .NET Core if you\u0026rsquo;re starting a new csproj. It\u0026rsquo;s hard to just move from .NET Framework to Core.\nWhere possible, keep your code in libraries targeting .NET Standard. This is so that it can be reused in projects targeting either Core or Framework.\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/webui/",
	"title": "Web Frontend (UI)",
	"tags": [],
	"description": "",
	"content": " A guide to Web Front End (JavaScript/HTML/CSS) *disclaimer: I\u0026rsquo;m not a web UI person, but I know a good UI when I see one\nFAQs React? Angular? Progressive Web App? Angular has a huge learning curve. React Native is very popular for mobile apps. Progressive Web Apps are web apps that work offline. It really depends on what you\u0026rsquo;re trying to accomplish.\nRather than spending countless hours researching, learn them all and see what works best for your project.\nGoogle has a ton of reference and tutorials available at: https://developers.google.com/web/\nWeb UI with C#? In .NET Core 3.0, Microsoft is introducing Blazor. The workshop (where you build a pizza ordering app) is quite comprehensive, you will learn a lot by going through this: https://aka.ms/blazorworkshop\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/azure/",
	"title": "Azure",
	"tags": [],
	"description": "",
	"content": " A guide to the most frequently-used features in Azure FAQs Which Azure resources are the most important? Azure has a TON of \u0026ldquo;resources\u0026rdquo;, but you probably won\u0026rsquo;t use most of them. To get started, you\u0026rsquo;ll want to install the Azure CLI.\nThe most popular resources are: Storage account (which includes table, queue features as well), Key Vault and App Service (think of it as a shared VM that hosts your backend web applications).\nAzure also has VM resources if you need a cloud dev environment or want to deploy your web application with some custom database.\nApp services and VMs can be assigned a \u0026ldquo;managed service identity\u0026rdquo; (MSI), which is used behind the scenes so that you don\u0026rsquo;t have to authenticate to the storage account/key vault without having to deal with storing secrets.\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/devops/",
	"title": "Devops (git/CI)",
	"tags": [],
	"description": "",
	"content": " What is Azure DevOps? This was the service formerly known as VSTS (renamed in 2018).\nIt\u0026rsquo;s a combination of services that support code development - each of the services have strange names though. Here\u0026rsquo;s what they mean:\n Boards = a Kanban board and a place where you track issues/work items sprints Repos = a git repository (can be public or private) Pipelines = a Continuous Integration tool - i.e. you check in the code and the tool does the build and deploy on some other server. You can have build scripts in PowerShell Artifacts = your own package feed (nuget, Maven, npm)  It can be installed either on your own server or used as a service (https://dev.azure.com).\n Disclaimer: I work at Microsoft (but not on the Azure Devops product). I would still recommend this service even if I didn\u0026rsquo;t.  How much? Pretty much free for 5 users or less.\nhttps://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/08about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": " Why this site? I\u0026rsquo;ve created this site after reading a lot of bad documentation with so much fluff and thought to myself \u0026ldquo;Why can\u0026rsquo;t you just give me the damn code snippet?\u0026rdquo;\nSo I sought to create my own documentation site as I learn new technologies in the hopes that it would save you some time and frustration.\nwhoami My name is Ambrose and I love coding because it lets me create useful tools for others.\nI got started with computers by creating a website on GeoCities. My latest project aside from this site is a web application I built that helps you listen to your selection of web articles on your smartphone - My Orator.\nBesides computer stuff, I am a student of traditional Shaolin Kung Fu.\nHere\u0026rsquo;s how you can reach me (apologies in advance, I\u0026rsquo;m slow to respond):    /  \n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/webui/css/",
	"title": "CSS tips",
	"tags": [],
	"description": "",
	"content": " CSS can be confusing as hell, what style overrides what? Typically, you would use the browser\u0026rsquo;s F12 tool to see what styles are being applied to the selected element.\nThe most useful thing about CSS is to make your content responsive (i.e. elements reformat depending on the width of the user\u0026rsquo;s browser).\nMaking it responsive Here\u0026rsquo;s how you would add padding to the left and right for screen size \u0026gt; 1337 pixels. (This is what I use for this site on the Category pages)\nThis goes between \u0026lt;style\u0026gt; tags or in the .css file:\n.paddedContent { padding-right: 10rem; padding-left: 10rem; } @media only all and (max-width: 1337px) { .paddedContent { padding: 5px 1rem; } }  Then wrap your content in a div:\n\u0026lt;div class=\u0026quot;paddedContent\u0026quot;\u0026gt; Your text here \u0026lt;/div\u0026gt;  Quick Reference Selectors:\ntag .class #id  "
},
{
	"uri": "https://efficienthacks.github.io/coderbook/web/api/",
	"title": "Web API Intro",
	"tags": [],
	"description": "",
	"content": " Tools Just get Postman, it\u0026rsquo;s the industry standard for testing HTTP requests.\nThe template code for a controller is as follows (in VS, this is the \u0026lsquo;MVC\u0026rsquo; template - i.e. it extends Controller, not ControllerBase):\n[Route(\u0026quot;api/[controller]\u0026quot;)] //don't need to change this, but if you have other controllers, you need this attribute. The [controller] part corresponds to 'Value' in this case (the substring in your class name before 'Controller') public class ValuesController : Controller { // GET api/values [HttpGet] public IEnumerable\u0026lt;string\u0026gt; Get() //note that the method name doesn't matter, you can call it whatever you want { return new string[] { \u0026quot;value1\u0026quot;, \u0026quot;value2\u0026quot; }; } // GET api/values/5 [HttpGet(\u0026quot;{id309g333}\u0026quot;)] public string Get(int id309g333) //Here, I'm emphasizing that the variable names in the attribute must match. { return \u0026quot;value\u0026quot;; }  Parsing JSON from a POST parameter You don\u0026rsquo;t need to parse any JSON, but you do need to create a class and use the [FromBody] attribute.\n[HttpPost(\u0026quot;login\u0026quot;)] public IActionResult Login([FromBody] UserPassModel up) { ... } public class UserPassModel { public string Username { get; set; } public string Password { get; set; } }  Your HTTP POST request will look like this (note the \u0026lsquo;JSON (application/json)\u0026rsquo;)\n{ \u0026quot;username\u0026quot;:\u0026quot;ambrose\u0026quot;, \u0026quot;password\u0026quot;:\u0026quot;0iashdg0h3\u0026quot; }  The JSON names can be lower case; .NET will automatically parse the JSON and create a UserPassModel object.\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/azure/keyvault/",
	"title": "Keyvault",
	"tags": [],
	"description": "",
	"content": " Why use a KeyVault? To keep creds out of source control. (even if it\u0026rsquo;s just creds for dev/test)\nEven if you don\u0026rsquo;t use keyvault, you should use environment variables to keep your secrets into being checked into git. The Keyvault API uses different mechanisms to access the keyvault - i.e. no code changes required if running locally or running in production.\nThe code Here\u0026rsquo;s how to do it quickly in a Console application (works the same way when you do it for a web application - sample web app project available in \u0026lsquo;Further Reading\u0026rsquo; section):\nusing Microsoft.Azure.KeyVault; using Microsoft.Azure.Services.AppAuthentication; static void Main(string[] args) { string secretstr,error ; var azureServiceTokenProvider = new AzureServiceTokenProvider(); //details: by default, it uses VS creds, Azure CLI, then Azure AD (if running on a domain joined machine) - whatever works first - I ran into an issue where I wanted to run it under a different cred than VS and it took me a while to figure out how to get it to just use Azure CLI creds. If you have different creds that you use in Visual Studio, pass in this parameter :\u0026quot;RunAs=Developer; DeveloperTool=AzureCli\u0026quot; try { var callback = new KeyVaultClient.AuthenticationCallback(azureServiceTokenProvider.KeyVaultTokenCallback); //this is where the magic happens (it tries multiple ways to authentication) var keyVaultClient = new KeyVaultClient(callback); var secrets = keyVaultClient.GetSecretsAsync(\u0026quot;https://testvault123.vault.azure.net/\u0026quot;).Result; //get all secrets var secret = keyVaultClient.GetSecretAsync(\u0026quot;https://testvault123.vault.azure.net/secrets/ambroseSecret\u0026quot;).Result; //get secret called 'ambroseSecret' secretstr = $\u0026quot;Secret: {secret.Value}\u0026quot;; } catch (Exception exp) { error = $\u0026quot;Something went wrong: {exp.Message}\u0026quot;; } var principal = azureServiceTokenProvider.PrincipalUsed != null ? $\u0026quot;Principal Used: {azureServiceTokenProvider.PrincipalUsed}\u0026quot; : string.Empty; } //set a breakpoint here to inspect the variables  How does it work? It works by using your local creds when in development and using a \u0026ldquo;managed identity\u0026rdquo;. When you run your code on an Azure App Service or an Azure VM with a managed identity enabled, the library automatically uses the managed identity. You might have to go to the Azure portal to enable managed identity.\nHere\u0026rsquo;s how you enable managed identity on from the Azure portal - (as of 2019): Further Reading The official documentation:\nhttps://docs.microsoft.com/en-us/azure/key-vault/service-to-service-authentication\nTry it out with a sample web application:\nhttps://github.com/Azure-Samples/app-service-msi-keyvault-dotnet\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/web/authn/",
	"title": "Authentication (with tokens)",
	"tags": [],
	"description": "",
	"content": " The basics of \u0026ldquo;Sign in with _____\u0026rdquo; First, make the user log in via an authentication provider (e.g. Google, Azure AD, Microsoft account)\nThe authn provider will send the user\u0026rsquo;s token to your website (the reply URL you specify)\nFrom your website, you take this token (which typically includes the user\u0026rsquo;s email and name) and verify it using another endpoint provided by the authn provider.\nSign in using a Microsoft Account (console application) Special thanks to Khoa Nguyen who got figured out how to do a MSA login via a console app.\nYou actually don\u0026rsquo;t need a web application to make use of OAuth. According to this answer, you can use a special client ID and reply URL to obtain a JWT (which includes the user\u0026rsquo;s name and email address).\nBecause this is a console app and you want to use OAuth for authentication, you have to create a project that targets .NET Framework. The reason is that it pops up a browser window (which is tied to .NET Framework) to have the user (who is at the command line) authenticate to Microsoft. This is done in the PromptForAuthn method.\nBecause this token is submitted to you by the user, you have to take this token and send it to https://login.microsoftonline.com/... and to verify the token\u0026rsquo;s signature. Which is what the Validate method does.\nusing Microsoft.IdentityModel.Clients.ActiveDirectory; using Microsoft.IdentityModel.Protocols; using Microsoft.IdentityModel.Protocols.OpenIdConnect; using Microsoft.IdentityModel.Tokens; using System; using System.Collections.Generic; using System.IdentityModel.Tokens.Jwt; using System.Linq; using System.Net.Http.Headers; using System.Text; using System.Threading.Tasks; namespace GettingAADToken { class Program { static void Main(string[] args) { var token = PromptForAuthn(); var x = Validate(token.Parameter); var name = x.Claims.Where(y =\u0026gt; y.Type == \u0026quot;upn\u0026quot;).First().Value; } static string requestedResource = \u0026quot;499b84ac-1321-427f-aa17-267ca6975798\u0026quot;; //azure devops static string clientId = \u0026quot;872cd9fa-d31f-45e0-9eab-6e460a02d1f1\u0026quot;; //visual studio static string tenantId = \u0026quot;72f988bf-86f1-41af-91ab-2d7cd011db47\u0026quot;; // Microsoft tenant's ID public static AuthenticationHeaderValue PromptForAuthn() { AuthenticationContext ctx = GetAuthenticationContext(tenantId); AuthenticationResult result = null; IPlatformParameters promptBehavior = new PlatformParameters(PromptBehavior.Auto); try { result = ctx.AcquireTokenAsync(requestedResource, clientId, new Uri(\u0026quot;urn:ietf:wg:oauth:2.0:oob\u0026quot;), promptBehavior).Result; Console.WriteLine(\u0026quot;Token expires on: \u0026quot; + result.ExpiresOn); var bearerAuthHeader = new AuthenticationHeaderValue(\u0026quot;Bearer\u0026quot;, result.AccessToken); return bearerAuthHeader; } catch (UnauthorizedAccessException) { // If the token has expired, prompt the user with a login prompt result = ctx.AcquireTokenAsync(requestedResource, \u0026quot;872cd9fa-d31f-45e0-9eab-6e460a02d1f1\u0026quot;, new Uri(\u0026quot;urn:ietf:wg:oauth:2.0:oob\u0026quot;), promptBehavior).Result; } catch (Exception ex) { Console.WriteLine(\u0026quot;{0}: {1}\u0026quot;, ex.GetType(), ex.Message); } return null; } private static AuthenticationContext GetAuthenticationContext(string tenant) { AuthenticationContext ctx = null; if (tenant != null) ctx = new AuthenticationContext(\u0026quot;https://login.microsoftonline.com/\u0026quot; + tenant); else { ctx = new AuthenticationContext(\u0026quot;https://login.windows.net/common\u0026quot;); if (ctx.TokenCache.Count \u0026gt; 0) { string homeTenant = ctx.TokenCache.ReadItems().First().TenantId; ctx = new AuthenticationContext(\u0026quot;https://login.microsoftonline.com/\u0026quot; + homeTenant); } } return ctx; } public static JwtSecurityToken Validate(string token) { string stsDiscoveryEndpoint = \u0026quot;https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\u0026quot;; ConfigurationManager\u0026lt;OpenIdConnectConfiguration\u0026gt; configManager = new ConfigurationManager\u0026lt;OpenIdConnectConfiguration\u0026gt;(stsDiscoveryEndpoint, new OpenIdConnectConfigurationRetriever()); OpenIdConnectConfiguration config = configManager.GetConfigurationAsync().Result; TokenValidationParameters validationParameters = new TokenValidationParameters { ValidateAudience = true, ValidateIssuer = true, IssuerSigningKeys = config.SigningKeys, ValidateLifetime = true }; validationParameters.ValidAudience = requestedResource; validationParameters.ValidIssuer = $\u0026quot;https://sts.windows.net/{tenantId}/\u0026quot;; JwtSecurityTokenHandler tokendHandler = new JwtSecurityTokenHandler(); SecurityToken jwt; var result = tokendHandler.ValidateToken(token, validationParameters, out jwt); return jwt as JwtSecurityToken; } } }  Making your web application generate OAuth tokens (from scratch) This is a .NET Core 2.1 example. You can start from a blank Web API project.\nStep 1: Add a secret string\nThis will be used to generate and verify the bearer token. I\u0026rsquo;ll be providing code to read the token from an environment variable so you don\u0026rsquo;t check secrets into git.\nappsettings.json\n{ \u0026quot;Logging\u0026quot;: { ... }, \u0026quot;AppSettings\u0026quot;: { \u0026quot;Token\u0026quot;: \u0026quot;myTokenEnvVar\u0026quot; } }  Step 2: Add token generation logic to your authentication logic\nMake a new controller called AuthnController with the following method. Of course, this won\u0026rsquo;t work yet because you need to set up some configuration. But go ahead and try it anyways and see what happens.\nusing System; using System.Collections.Generic; using System.IdentityModel.Tokens.Jwt; using System.Linq; using System.Security.Claims; using System.Text; using System.Threading.Tasks; using Microsoft.AspNetCore.Authorization; using Microsoft.AspNetCore.Mvc; using Microsoft.Extensions.Configuration; using Microsoft.IdentityModel.Tokens; ... private readonly IConfiguration _config; public AuthnController(IConfiguration config) { _config = config; } [HttpPost(\u0026quot;login\u0026quot;)] public IActionResult Login([FromBody] UserPassModel up) { if(IsUserValid(up.Username, up.Password)) //this would be some backend database check { return Unauthorized(); } var tokenHandler = new JwtSecurityTokenHandler(); //read the key from the environment variable var key = Encoding.ASCII.GetBytes( System.Environment.GetEnvironmentVariable( _config.GetSection(\u0026quot;AppSettings:Token\u0026quot;).Value, EnvironmentVariableTarget.User ) ); var tokenDescriptor = new SecurityTokenDescriptor { Issuer = \u0026quot;self\u0026quot;, //in our scenario, Issuer and Audience won't be verified, only the key will Audience = \u0026quot;aud\u0026quot;, Subject = new System.Security.Claims.ClaimsIdentity(new Claim[] { new Claim(ClaimTypes.Email, \u0026quot;emailAddressHere\u0026quot;), new Claim(ClaimTypes.Name, up.Username) //you can have as few or as many claims here }), Expires = DateTime.UtcNow.AddDays(10), SigningCredentials = new SigningCredentials( new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature) }; var token = tokenHandler.CreateToken(tokenDescriptor); var tokenString = tokenHandler.WriteToken(token); return Ok(tokenString); }  Step 3: Add Configuration code to Startup.cs\npublic void ConfigureServices(IServiceCollection services) { services.AddMvc(); var key = Encoding.ASCII.GetBytes( System.Environment.GetEnvironmentVariable( Configuration.GetSection(\u0026quot;AppSettings:Token\u0026quot;).Value, EnvironmentVariableTarget.User ) ); services.AddAuthentication(Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme) .AddJwtBearer(options =\u0026gt; { options.IncludeErrorDetails = true; options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters { ValidateIssuerSigningKey = true, IssuerSigningKey = new Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(key), ValidIssuer = \u0026quot;self\u0026quot;, ValidateIssuer = true, ValidateAudience = false }; }); }  Step 4: Add code to the Configure() method in the same file\nThis one is easily missed. You have to add app.UseAuthentication() and this has to be before app.UseMvc()\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseAuthentication(); //\u0026lt;-- this is important app.UseMvc(); }  Step 5: Profit\nFinally, you need a method that requires authentication to test this out.\nYou need to add the [Authorize] attribute to the controller.\n[Authorize] [Route(\u0026quot;api/[controller]\u0026quot;)] public class RequiresAuthnController : Controller { [HttpGet(\u0026quot;getuser/{id}\u0026quot;)] public IActionResult GetUser(int id) { return Ok(\u0026quot;user here \u0026quot; + id + User.Identity.Name); }  Here\u0026rsquo;s what it looks like in Postman\n[todo: add snippet to sign in with Google/Microsoft account for a web application]\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Docs for .NET coders who need to hustle \nLess theory, more code samples \nHello! If you\u0026rsquo;re hacking on something, you don\u0026rsquo;t have time to dive into details.\nYou just need some code to get you moving in the right direction.\nWell, you\u0026rsquo;re in the right place.\nMy name is Ambrose and I like using .NET to build applications.\nWhen I started this (June 2019), .NET was in a transition phase of moving away from a Windows only environment into a multi-platform environment with the advent of .NET Core.\nI\u0026rsquo;m documenting my learnings here in the hopes that it will help someone. Please use the Disqus comments to ask questions or clarify something.\nHappy coding!\n\n"
},
{
	"uri": "https://efficienthacks.github.io/coderbook/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://efficienthacks.github.io/coderbook/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]